Bugs
-----
- Check: http://bugs.openflowhub.org/browse/ROUTEFLOW

ToDo
==============================
(approx. ordered by priority)

- Code standardization (names of variables, indentation, etc.) 
- Optimize some data structures(change lists for maps, for example). 
- Make the code more modular(create a .hh for rf-controller, consider how better we can divide in classes, less code on main.cc) 
- Let the (RF-Server order the) RF-Slave set the VM's non-administrative interfaces to the same MAC Address. 
- Create a verbose mode to RF-Server(server info are only available on log files).
- Get TCP port, ovs name and RouteFlow operation from user arguments on RF-Server.
- Experiment with NEC Trema controller: Port routeflowc to Trema
- Port RF-C to Beacon controller


Features
-------------
(approx. ordered by priority)

- Add TTL-decrement action (if supported by the datapath devices)

- DataBase for consistent state management (Choose NoSQL candidate, e.g., Redis http://88.198.54.126/nosqldbs.pdf)

- Extend RouteFlow protocol with a command to on-demand send VM IP + ARP Table from RF-Slave to Server 

- Flexible mapping of switches to VMs:  
--- M:1, 1:N and M:N mapping between Datapath and VMs, allowing for virtual routing approaches and/or physical switch stacking.
--- Explore integration opportunities with FlowVisor

- Libvirt: Virtualization-independence to accomodate alternative virtualization environments via unified virtualization API provided by libvirt
--- Provide on-demand start-up of VMs via libvirt upon interactions (e.g. CLI) with RF-Server

- Routing Protocol Optimization: 
--- Searate topology discovery and maintenance from state distribution
--- Dynamic virtual topology maintenance, with selective routing protocol messages delivery to the Datapath (e.g., HELLOs).
--- Improve the scenario where routing protocol messages are kept in the virtual domain and topology is mantained through a  Topology Discovery controller application.
--- Hooks into Quagga Zebra to reflect link up/down events

- Resiliency & Scalability:
--- Physically distribute the virtualization environment via mutliple OVS providing the connectivity of the virtual control network
--- Improve resiliency: Have a "stand-by" environment to take over in case of failure of the master RF-Server / Virtualized Control Plane 